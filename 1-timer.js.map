{"version":3,"file":"1-timer.js","sources":["../src/js/1-timer.js"],"sourcesContent":["import flatpickr from 'flatpickr';\nimport 'flatpickr/dist/flatpickr.min.css';\nimport iziToast from 'izitoast';\nimport 'izitoast/dist/css/iziToast.min.css';\n\nconst datePicker = document.querySelector('#datetime-picker');\nconst startButton = document.querySelector('button[data-start]');\nconst timerDisplay = document.querySelector('.timer');\n\nlet timerId = null;\nlet selectedDate = null;\n\nconst options = {\n  enableTime: true,\n  time_24hr: true,\n  minuteIncrement: 1,\n  defaultDate: new Date(),\n  onClose(selectedDates) {\n    console.log(selectedDates[0]);\n  },\n  onChange(selectedDates, dateStr, instance) {\n    selectedDate = selectedDates[0];\n\n    if (selectedDate - new Date() > 1000) {\n      startButton.disabled = false;\n      instance.close();\n    } else {\n      iziToast.error({\n        title: 'Invalid Date',\n        message: 'Please choose a date in the future',\n        position: 'topRight',\n      });\n      startButton.disabled = true;\n      datePicker.value = '';\n    }\n  },\n};\n\nflatpickr(datePicker, options);\ndatePicker.value = '';\nstartButton.disabled = true;\n\nfunction convertMs(ms) {\n  const second = 1000;\n  const minute = second * 60;\n  const hour = minute * 60;\n  const day = hour * 24;\n\n  const days = Math.floor(ms / day);\n  const hours = Math.floor((ms % day) / hour);\n  const minutes = Math.floor((ms % hour) / minute);\n  const seconds = Math.floor((ms % minute) / second);\n\n  return { days, hours, minutes, seconds };\n}\n\nfunction formatTime({ days, hours, minutes, seconds }) {\n  return `${String(days).padStart(2, '0')} : ${String(hours).padStart(\n    2,\n    '0'\n  )} : ${String(minutes).padStart(2, '0')} : ${String(seconds).padStart(\n    2,\n    '0'\n  )}`;\n}\n\nstartButton.addEventListener('click', () => {\n  if (!selectedDate || selectedDate <= new Date()) return;\n\n  startButton.disabled = true;\n  datePicker.disabled = true;\n\n  timerId = setInterval(() => {\n    const now = new Date();\n    const timeDiff = selectedDate - now;\n\n    if (timeDiff <= 0) {\n      clearInterval(timerId);\n      timerDisplay.textContent = '00 : 00 : 00 : 00';\n      datePicker.disabled = false;\n      datePicker.value = '';\n      selectedDate = null;\n      return;\n    }\n\n    const time = convertMs(timeDiff);\n    timerDisplay.textContent = formatTime(time);\n  }, 1000);\n});\n"],"names":["datePicker","startButton","timerDisplay","timerId","selectedDate","options","selectedDates","dateStr","instance","iziToast","flatpickr","convertMs","ms","days","hours","minutes","seconds","formatTime","timeDiff","time"],"mappings":"0IAKA,MAAMA,EAAa,SAAS,cAAc,kBAAkB,EACtDC,EAAc,SAAS,cAAc,oBAAoB,EACzDC,EAAe,SAAS,cAAc,QAAQ,EAEpD,IAAIC,EAAU,KACVC,EAAe,KAEnB,MAAMC,EAAU,CACd,WAAY,GACZ,UAAW,GACX,gBAAiB,EACjB,YAAa,IAAI,KACjB,QAAQC,EAAe,CACrB,QAAQ,IAAIA,EAAc,CAAC,CAAC,CAC7B,EACD,SAASA,EAAeC,EAASC,EAAU,CACzCJ,EAAeE,EAAc,CAAC,EAE1BF,EAAe,IAAI,KAAS,KAC9BH,EAAY,SAAW,GACvBO,EAAS,MAAO,IAEhBC,EAAS,MAAM,CACb,MAAO,eACP,QAAS,qCACT,SAAU,UAClB,CAAO,EACDR,EAAY,SAAW,GACvBD,EAAW,MAAQ,GAEtB,CACH,EAEAU,EAAUV,EAAYK,CAAO,EAC7BL,EAAW,MAAQ,GACnBC,EAAY,SAAW,GAEvB,SAASU,EAAUC,EAAI,CAMrB,MAAMC,EAAO,KAAK,MAAMD,EAAK,KAAG,EAC1BE,EAAQ,KAAK,MAAOF,EAAK,MAAO,IAAI,EACpCG,EAAU,KAAK,MAAOH,EAAK,KAAQ,GAAM,EACzCI,EAAU,KAAK,MAAOJ,EAAK,IAAU,GAAM,EAEjD,MAAO,CAAE,KAAAC,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAS,CAC1C,CAEA,SAASC,EAAW,CAAE,KAAAJ,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,EAAI,CACrD,MAAO,GAAG,OAAOH,CAAI,EAAE,SAAS,EAAG,GAAG,CAAC,MAAM,OAAOC,CAAK,EAAE,SACzD,EACA,GACD,CAAA,MAAM,OAAOC,CAAO,EAAE,SAAS,EAAG,GAAG,CAAC,MAAM,OAAOC,CAAO,EAAE,SAC3D,EACA,GACJ,CAAG,EACH,CAEAf,EAAY,iBAAiB,QAAS,IAAM,CACtC,CAACG,GAAgBA,GAAgB,IAAI,OAEzCH,EAAY,SAAW,GACvBD,EAAW,SAAW,GAEtBG,EAAU,YAAY,IAAM,CAE1B,MAAMe,EAAWd,EADL,IAAI,KAGhB,GAAIc,GAAY,EAAG,CACjB,cAAcf,CAAO,EACrBD,EAAa,YAAc,oBAC3BF,EAAW,SAAW,GACtBA,EAAW,MAAQ,GACnBI,EAAe,KACf,MACN,CAEI,MAAMe,EAAOR,EAAUO,CAAQ,EAC/BhB,EAAa,YAAce,EAAWE,CAAI,CAC3C,EAAE,GAAI,EACT,CAAC"}